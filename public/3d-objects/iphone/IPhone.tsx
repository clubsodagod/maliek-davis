/* eslint-disable @typescript-eslint/no-unused-vars */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 IPhone.gltf -t -T -k -K s 
Files: IPhone.gltf [36.78KB] > C:\Users\owner\Desktop\maliek_davis\public\3d-objects\iphone\IPhone-transformed.glb [149.99KB] (-308%)
Author: Aron S (https://sketchfab.com/grandteodoric2)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/iphone-14-pro-max-free-model-6a05784dd60f433bbaaac0b54891de44
Title: Iphone 14 pro max free model
*/

import * as THREE from 'three'
import React, { JSX, useEffect, useMemo, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { programmerImg } from '@/library/image.cdn'
import { useLoader, useFrame } from '@react-three/fiber'

type ActionName = 'Cube.004|KameraAction' | 'Cube.004|K��r.006Action.001'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    ['Cube004_matt_s��t��t_0']: THREE.Mesh
    Cube004_Anyag004_0: THREE.Mesh
    Cube004_vaku001_0: THREE.Mesh
  }
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial
    ['Anyag.004']: THREE.MeshStandardMaterial
    PaletteMaterial002: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

interface IPhoneProps {
  link?: string;
  props?: JSX.IntrinsicElements['group'];
}

function IPhone({ link, props }: IPhoneProps) {
  const group = React.useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF('/3d-objects/iphone/IPhone-transformed.glb') as unknown as GLTFResult
  const { actions } = useAnimations(animations, group);


  const [image, setImage] = useState<string>(link || programmerImg)
  const tempTexture = useLoader(THREE.TextureLoader, image)
  const [imageTexture, setImageTexture] = useState<THREE.Texture | null>(null)

  useEffect(() => {
    const textureLoader = new THREE.TextureLoader()
    const url = link || programmerImg

    textureLoader.load(url, (loadedTexture) => {
      loadedTexture.flipY = true
      loadedTexture.center.set(0.5, 0.5)
      loadedTexture.rotation = Math.PI
      loadedTexture.needsUpdate = true

      setImageTexture(loadedTexture)
    })
  }, [link])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="RootNode" scale={0.01}>
          <group name="Cube004" position={[127.624, 25.228, 97.788]} rotation={[Math.PI / 2, 0, -Math.PI / 2]} scale={[118.572, 95.262, 100]}>
            <mesh name="Cube004_matt_s��t��t_0" geometry={nodes['Cube004_matt_s��t��t_0'].geometry} material={materials.PaletteMaterial001} />
            <mesh name="Cube004_Anyag004_0" geometry={nodes.Cube004_Anyag004_0.geometry}  >
              {imageTexture && <meshStandardMaterial map={imageTexture} />}
            </mesh>
            <mesh name="Cube004_vaku001_0" geometry={nodes.Cube004_vaku001_0.geometry} material={materials.PaletteMaterial002} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/3d-objects/iphone/IPhone-transformed.glb');
export default IPhone;
